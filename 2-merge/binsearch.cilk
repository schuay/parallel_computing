#include "merge.h"

#include <cilk-lib.cilkh>

/* #define DEBUG(...) fprintf(stderr, __VA_ARGS__) */
#define DEBUG(...)

const char *algorithm_name = "binary search based parallel merge";

static int binary_search(TYPE needle, const TYPE *haystack, int n)
{
    int low = 0;
    int high = n;

    while (low < high) {
        int mid = (low + high) / 2;
        if (needle < haystack[mid]) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }

    return low;
}

struct bsearch_args_t {
    int *rankA;
    int *rankB;
    const TYPE *a;
    int n;
    const TYPE *b;
    int m;
    int p;
};

static void binary_search_datapara(int i, void *args)
{
    struct bsearch_args_t *bargs = (struct bsearch_args_t *) args;

    const TYPE *a = bargs->a;
    int n = bargs->n;
    const TYPE *b = bargs->b;
    int m = bargs->m;
    int p = bargs->p;

    TYPE needleA = a[i * n / p];
    TYPE needleB = b[i * m / p];

    bargs->rankA[i] = binary_search(needleA, b, m);
    bargs->rankB[i] = binary_search(needleB, a, n);
}

/* TODO: not sure if I'm using this right? Is this the "data parallel construct" the
 * assignment text is referring to? */
cilk void datapara(int i, int j, int unit, void (*f)(int, void*), void *optargs)
{
    if (j - i <= unit) {
        int k;
        for (k = i; k < j; k++) {
            f(k, optargs);
        }
    } else {
        int m = (i + j) / 2;
        spawn datapara(i, m, unit, f, optargs);
        spawn datapara(m, j, unit, f, optargs);
        sync;
    }
}

struct merge_args_t {
    const int *rankA;
    const int *rankB;
    const TYPE *a;
    int n;
    const TYPE *b;
    int m;
    int p;
    TYPE *c;
};

static void merge_datapara(int i, void *args)
{
    struct merge_args_t *margs = (struct merge_args_t *) args;

    const int *rankA = margs->rankA;
    const int *rankB = margs->rankB;
    const TYPE *a = margs->a;
    int n = margs->n;
    const TYPE *b = margs->b;
    int m = margs->m;
    int p = margs->p;
    TYPE *c = margs->c;

    int a_start = (i == 0) ? 0 : rankB[i];
    int a_length = (i == p - 1) ? n - a_start : rankB[i + 1] - a_start;

    int b_start = (i == 0) ? 0 : rankA[i];
    int b_length = (i == p - 1) ? m - b_start : rankA[i + 1] - b_start;

    merge_seq(a + a_start, a_length, b + b_start, b_length, c + a_start + b_start);
}

cilk void merge_impl(const TYPE *a, int n, const TYPE *b, int m, TYPE *c, perf_t *perf)
{
    int p = Cilk_active_size;
    int *rankA = calloc(p, sizeof(int));
    int *rankB = calloc(p, sizeof(int));

    struct bsearch_args_t bsearch_args = { rankA, rankB, a, n, b, m, p };
    struct merge_args_t merge_args = { rankA, rankB, a, n, b, m, p, c };

    spawn datapara(0, p, 1, binary_search_datapara, &bsearch_args);
    sync;

    spawn datapara(0, p, 1, merge_datapara, &merge_args);
    sync;
}
