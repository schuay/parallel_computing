#include "merge.h"

#include <cilk-lib.cilkh>

/* #define DEBUG(...) fprintf(stderr, __VA_ARGS__) */
#define DEBUG(...)

const char *algorithm_name = "binary search based parallel merge";

static size_t binary_search(TYPE needle, const TYPE *haystack, size_t n)
{
    size_t low = 0;
    size_t high = n;

    while (low < high) {
        size_t mid = (low + high) / 2;
        if (needle < haystack[mid]) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }

    return low;
}

struct bsearch_args_t {
    size_t *rank;
    const TYPE *a;
    size_t n;
    const TYPE *b;
    size_t m;
    size_t p;
};

static cilk void binary_search_datapara(size_t i, void *args)
{
    struct bsearch_args_t *bargs = (struct bsearch_args_t *) args;

    const TYPE *a = bargs->a;
    size_t n = bargs->n;
    const TYPE *b = bargs->b;
    size_t m = bargs->m;
    size_t p = bargs->p;

    TYPE needle = a[i * n / p];

    bargs->rank[i] = binary_search(needle, b, m);
}

static cilk void datapara(size_t i, size_t j, size_t unit, cilk void (*f)(size_t, void*), void *optargs)
{
    if (j - i <= unit) {
        size_t k;
        for (k = i; k < j; k++) {
            spawn f(k, optargs);
        }
    } else {
        size_t m = (i + j) / 2;
        spawn datapara(i, m, unit, f, optargs);
        spawn datapara(m, j, unit, f, optargs);
        sync;
    }
}

struct merge_args_t {
    const size_t *rank;
    const TYPE *a;
    size_t n;
    const TYPE *b;
    size_t m;
    size_t p;
    TYPE *c;
    int nsplit;
};

static cilk void merge_sub(const TYPE *a, size_t n, const TYPE *b, size_t m, TYPE *c,
        size_t p, int nsplit);

static cilk void merge_datapara(size_t i, void *args)
{
    struct merge_args_t *margs = (struct merge_args_t *) args;

    const size_t *rank = margs->rank;
    const TYPE *a = margs->a;
    size_t n = margs->n;
    const TYPE *b = margs->b;
    size_t m = margs->m;
    size_t p = margs->p;
    TYPE *c = margs->c;
    int nsplit = margs->nsplit;

    size_t a_start = i * n / p;
    size_t a_start_next = (i + 1) * n / p;
    size_t a_length = (i == p - 1) ? n - a_start : a_start_next - a_start;

    size_t b_start = (i == 0) ? 0 : rank[i];
    size_t b_length = (i == p - 1) ? m - b_start : rank[i + 1] - b_start;

    if ((a_length + b_length) > ((m + n) / p) && nsplit <= 1) {
        spawn merge_sub(b + b_start, b_length, a + a_start, a_length,
            c + a_start + b_start, p, nsplit + 1);
        return;
    }

    merge_seq(a + a_start, a_length, b + b_start, b_length, c + a_start + b_start);
}

static cilk void merge_sub(const TYPE *a, size_t n, const TYPE *b, size_t m, TYPE *c,
        size_t p, int nsplit)
{
    size_t *rank = calloc(p, sizeof(size_t));

    struct bsearch_args_t bsearch_args = { rank, a, n, b, m, p };
    struct merge_args_t merge_args = { rank, a, n, b, m, p, c, nsplit };

    spawn datapara(0, p, 1, binary_search_datapara, &bsearch_args);
    sync;

    spawn datapara(0, p, 1, merge_datapara, &merge_args);
    sync;
}

cilk void merge_impl(const TYPE *a, size_t n, const TYPE *b, size_t m, TYPE *c,
        int *nproc)
{
    size_t p = Cilk_active_size;
    *nproc = p;

    spawn merge_sub(a, n, b, m, c, p, 1);
    sync;
}
