#include "merge.h"

#include <string.h>

#include <cilk-lib.cilkh>

/* #define DEBUG(...) fprintf(stderr, __VA_ARGS__) */
#define DEBUG(...)

const char *algorithm_name = "recursive parallel merge";

static size_t binary_search(TYPE needle, const TYPE *haystack, size_t n)
{
    size_t low = 0;
    size_t high = n;

    while (low < high) {
        size_t mid = (low + high) / 2;
        if (needle < haystack[mid]) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }

    return low;
}

static cilk void merge_recursive(const TYPE *a, size_t n, const TYPE *b, size_t m, TYPE *c,
        size_t unit, perf_t *perf)
{
    size_t r, s;

    if (m + n <= unit) {
        merge_seq(a, n, b, m, c);
        return;
    }

    if (n == 0) {
        memcpy(c, b, m * sizeof(TYPE));
        return;
    }

    if (m == 0) {
        memcpy(c, a, n * sizeof(TYPE));
        return;
    }

    if (n < m) {
        spawn merge_recursive(b, m, a, n, c, unit, perf);
        sync;
        return;
    }

    r = n / 2;
    s = binary_search(a[r], b, m);

    /* a and b both have only one element, with a[0] < b[0] */
    if (r == 0 && s == 0) {
        c[0] = a[0];
        c[1] = b[0];
        return;
    }

    spawn merge_recursive(a, r, b, s, c, unit, perf);
    spawn merge_recursive(a + r, n - r, b + s, m - s, c + r + s, unit, perf);

    sync;
}

cilk void merge_impl(const TYPE *a, size_t n, const TYPE *b, size_t m, TYPE *c,
        perf_t *perf, int *nproc)
{
    size_t p = Cilk_active_size;
    *nproc = p;

    spawn merge_recursive(a, n, b, m, c, (m + n) / p, perf);
    sync;
}
